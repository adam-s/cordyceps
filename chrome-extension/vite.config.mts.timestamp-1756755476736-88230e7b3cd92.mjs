// vite.config.mts
import { defineConfig } from "file:///Users/adamsohn/Projects/cordyceps/node_modules/.pnpm/vite@5.4.19_@types+node@20.17.47_lightningcss@1.30.1_terser@5.40.0/node_modules/vite/dist/node/index.js";
import { resolve as resolve3 } from "path";
import libAssetsPlugin from "file:///Users/adamsohn/Projects/cordyceps/node_modules/.pnpm/@laynezh+vite-plugin-lib-assets@1.1.0_vite@6.3.5_@types+node@22.15.21_jiti@2.4.2_lightningcss_omqvfkcderveh6a5az75fqojoa/node_modules/@laynezh/vite-plugin-lib-assets/dist/index.js";

// utils/plugins/make-manifest.plugin.ts
import * as fs from "fs";
import * as path from "path";
import { ManifestParser, colorLog } from "file:///Users/adamsohn/Projects/cordyceps/packages/dev-utils/dist/index.js";
import { pathToFileURL } from "url";
import * as process2 from "process";
var __vite_injected_original_dirname = "/Users/adamsohn/Projects/cordyceps/chrome-extension/utils/plugins";
var { resolve } = path;
var rootDir = resolve(__vite_injected_original_dirname, "..", "..");
var manifestFile = resolve(rootDir, "manifest.js");
var getManifestWithCacheBurst = () => {
  const withCacheBurst = (path3) => `${path3}?${Date.now().toString()}`;
  if (process2.platform === "win32") {
    return import(withCacheBurst(pathToFileURL(manifestFile).href));
  }
  return import(withCacheBurst(manifestFile));
};
function makeManifestPlugin(config) {
  function makeManifest(manifest, to) {
    if (!fs.existsSync(to)) {
      fs.mkdirSync(to);
    }
    const manifestPath = resolve(to, "manifest.json");
    const isFirefox = process2.env.__FIREFOX__;
    fs.writeFileSync(
      manifestPath,
      ManifestParser.convertManifestToString(manifest, isFirefox ? "firefox" : "chrome")
    );
    colorLog(`Manifest file copy complete: ${manifestPath}`, "success");
  }
  return {
    name: "make-manifest",
    buildStart() {
      this.addWatchFile(manifestFile);
    },
    async writeBundle() {
      const outDir2 = config.outDir;
      const manifest = await getManifestWithCacheBurst();
      makeManifest(manifest.default, outDir2);
    }
  };
}

// vite.config.mts
import { watchRebuildPlugin } from "file:///Users/adamsohn/Projects/cordyceps/packages/hmr/dist/index.js";

// utils/plugins/move-declarative-net-request.plugin.ts
import * as fs2 from "fs";
import * as path2 from "path";
import { colorLog as colorLog2 } from "file:///Users/adamsohn/Projects/cordyceps/packages/dev-utils/dist/index.js";
var __vite_injected_original_dirname2 = "/Users/adamsohn/Projects/cordyceps/chrome-extension/utils/plugins";
var { resolve: resolve2 } = path2;
var rootDir2 = resolve2(__vite_injected_original_dirname2, "..", "..");
var declarativeNetRequestFile = resolve2(rootDir2, "declarative-net-request.json");
function moveDeclarativeNetRequestPlugin(config) {
  function moveDeclarativeNetRequest(to) {
    if (!fs2.existsSync(declarativeNetRequestFile)) {
      return;
    }
    if (!fs2.existsSync(to)) {
      fs2.mkdirSync(to, { recursive: true });
    }
    const destinationPath = resolve2(to, "declarative-net-request.json");
    fs2.copyFileSync(declarativeNetRequestFile, destinationPath);
    colorLog2(`declarative-net-request.json moved to: ${destinationPath}`, "success");
  }
  return {
    name: "move-declarative-net-request",
    buildStart() {
      this.addWatchFile(declarativeNetRequestFile);
    },
    writeBundle() {
      moveDeclarativeNetRequest(config.outDir);
    }
  };
}

// vite.config.mts
var __vite_injected_original_dirname3 = "/Users/adamsohn/Projects/cordyceps/chrome-extension";
var rootDir3 = resolve3(__vite_injected_original_dirname3);
var libDir = resolve3(rootDir3, "lib");
var srcDir = resolve3(rootDir3, "background/src");
var vsDir = resolve3(rootDir3, "../packages/vs/vs");
var sharedDir = resolve3(rootDir3, "../packages/shared/src");
var isDev = process.env.__DEV__ === "true";
var isProduction = !isDev;
var outDir = resolve3(rootDir3, "..", "dist");
var vite_config_default = defineConfig({
  resolve: {
    alias: {
      "@root": rootDir3,
      "@lib": libDir,
      "@src": srcDir,
      "@assets": resolve3(libDir, "assets"),
      "@shared": sharedDir,
      vs: vsDir
    }
  },
  plugins: [
    libAssetsPlugin({
      outputPath: outDir
    }),
    // Ensure the plugin is typed correctly
    makeManifestPlugin({ outDir }),
    moveDeclarativeNetRequestPlugin({ outDir }),
    // Use the new plugin
    isDev && watchRebuildPlugin({ reload: true })
  ],
  publicDir: resolve3(rootDir3, "public"),
  build: {
    lib: {
      formats: ["iife"],
      entry: resolve3(__vite_injected_original_dirname3, "background/index.ts"),
      name: "BackgroundScript",
      fileName: "background"
    },
    outDir,
    minify: isProduction,
    reportCompressedSize: isProduction,
    modulePreload: true,
    rollupOptions: {
      external: ["chrome"]
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
